# TODO

- when importing/updating, prompt for artist
  - new
  - personal name

- allow artist key to be user-defined
  - save in group database
  - allow for modification as needed
  - allow override of primary artist
    - eg, to file release under main artist instead of artist-group of collaboration
  - do artist sort/rename using artist ID
    - instead of CanonicalArtists/PersonalNames hash maps
  - ensure artist key is unique
    - doesn't represent multiple artists

- split up Catalog
  - Discogs-related classes under Discogs
  - Album, AlbumTrack, Artist (new) under Catalog (or Collection)

- re-implement file-based Group
  - convert all Discogs structures

- store albums/tracks/artists in SQLite/Sequel

- save artist ID into album

- when selecting cover, show cover images & info in iTerm
  - instead of shelling out to Preview
  - show resolution, file size, file name

- move Equalizer to separate AutoEQ gem
  - handles lookup in AutoEQ results
  - knows about precedences
  - has methods to make equalizer specifications for ffmpeg/afilter, etc.
  - try convolution equalizers
      https://github.com/jaakkopasanen/AutoEq#convolution-equalizers
      https://ffmpeg.org/ffmpeg-filters.html#toc-headphone
      https://ffmpeg.org/ffmpeg-filters.html#firequalizer

- experiment with volume up/down keys
  - in exclusive mode
  - does it work with Musicstreamer?

- describe player modes in README
  - 3-function player: play random album, play random tracks (typical shuffle mode), or play the album for the current track

- see if taglib-ruby will substitute for ffprobe/mp4tags/mp4art/etc.

- integrate/expand ripping HOWTO

- consider using `cover_image` from collection item instead of `images` from release

- create better way of making sub-commands
  - as easy as shell script
  - no class or methods needed
  - one command -> one file
  - auto-loaded from commands/ directory
  - no need to modify bin/musicbox or lib/musicbox.rb
  - predefined variables:
    - $catalog (based on --root)
    - $prompt

- improve covers:
  - make 2-up
  - center horizontally on page
  - make crop marks

- import: handle multiple formats/discs better
  - consider case where digitized LP or downloaded tracks becomes album
  - if more than one format, prompt for choice
  - but how to handle multidisc releases 
    - some have formats of [CD, CD] ('expanded')
    - others have [CD x2] ('compact')
  - save selected format into album info
  - in general:
    - use Discogs data as a guide/template
      - but allow assigning, collapsing, expanding, reordering as needed

- allow creation of standalone album
  - for: unreleased, mixtape, etc.

- allow label font to be configured

- when importing/updating, save track info to JSON file
  - bit depth
  - sample rate
  - channels
  - format/codec

- save @cover_file in album info.json file?
  - just read cover_file (as path) instead of deriving via glob

- have player read default settings from config
  - audio-device, exclusive, EQ, etc.
  - either global (single), or as profiles (multiple)
    - so can have one for headphones, and another for speakers
    - add --profile=X flag to specify profile
    - or specify multiple configs?

- build player that works with BlueSound
  - same logic, but asks BluOS to pull music from shared library on Mac
  - see ~/bin/bluos

- use curses or tty for full-screen player TTY mode?

- use TTY::ProgressBar to show track playing progress?

- move config handling into MusicBox class
  - also definition of import dir, etc.
  - use TTY::Config?
  - chain/merge configs?
    - order:
      - hardcoded defaults
      - env vars
      - main config file
      - auxiliary config file(s)
      - CLI options

- sort #find results by relevance, not by artist/title

- improve 'select' tool
  - save to $MUSIC_ROOT/selection.json?
  - optionally name
  - can be referred to in query

- when updating collection, don't simply delete previous collection
  - determine additions/removals/changes
  - handle case where Discogs has merged/moved releases
    - ie, release_id has changed
    - need to move related album

- improve log handling
  - create Log class with attributes:
    - timestamp
    - media type
    - accurip details
    - file:
    - disc: (can be nil)
    - status: (overall)
    - tracks status: (tracks)
  - add command to show:
    - missing rips (no tracks or log files)
    - questionable rips (tracks, but no log files)
    - unconfirmed rips (no record in online databases)
    - bad rips (actual read errors)
    - dubious rips (inconsistent checksums)
    - successful rips

- calculate loudness
  - see: info/replay-gain.md