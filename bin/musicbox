#!/usr/bin/env ruby

require 'simple-command'
require 'musicbox'

SimpleCommand.run do

  global root: nil do
    @catalog = MusicBox::Catalog.new(root: @root)
  end

  command 'extract' do |args|
    extractor = MusicBox::Extractor.new(catalog: @catalog)
    @catalog.dirs_for_args(@catalog.extract_dir, args).each do |dir|
      extractor.extract_dir(dir)
    end
  end

  command 'export', dir: nil, compress: false, force: false, parallel: true do |args|
    raise Error, "Must specify destination directory (--dir)" unless @dir
    exporter = MusicBox::Exporter.new(
      catalog: @catalog,
      dir: @dir,
      compress: @compress,
      force: @force,
      parallel: @parallel)
    @catalog.find_releases(args).each do |release|
      album = release.album or raise Error, "Album does not exist for release #{release.id}"
      exporter.export_album(album)
    end
  end

  command 'fix' do |args|
    @catalog.fix(args)
  end

  command 'get-cover' do |args|
    @catalog.get_cover(args)
  end

  command 'make-cover' do |args|
    @catalog.make_cover(args)
  end

  command 'import' do |args|
    importer = MusicBox::Importer.new(catalog: @catalog)
    @catalog.dirs_for_args(@catalog.import_dir, args).each do |dir|
      importer.import_dir(dir)
    end
  end

  command 'label' do |args|
    labeler = MusicBox::Labeler.new(catalog: @catalog)
    @catalog.prompt_releases(args).each { |r| labeler << r.to_label }
    labeler.make_labels('/tmp/labels.pdf', open: true)
  end

  command 'dir', open: false do |args|
    @catalog.dir(args, open: @open)
  end

  command 'orphaned' do
    @catalog.show_orphaned
  end

  command 'show', details: false do |args|
    @catalog.show(args, show_details: @details)
  end

  command 'csv' do |args|
    @catalog.make_csv(args)
  end

  command 'show-dups' do |args|
    @catalog.show_dups(args)
  end

  command 'make-artist-keys' do |args|
    @catalog.make_artist_keys(args)
  end

  command 'play', device: nil, log_level: nil do |args|
    releases = args.empty? ? @catalog.releases.items.select(&:album) : @catalog.prompt_releases(args)
    albums = releases.map(&:album).compact
    player = MusicBox::Player.new(
      albums: albums,
      audio_device: @device,
      mpv_log_level: @log_level)
    player.play
  end

  command 'select' do |args|
    @catalog.select(args)
  end

  command 'update' do |args|
    MusicBox::Discogs.new(catalog: @catalog).update
  end

  command 'update-tags', force: false do |args|
    @catalog.update_tags(args, force: @force)
  end

end