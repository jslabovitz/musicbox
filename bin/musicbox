#!/usr/bin/env ruby

require 'simple-command'
require 'musicbox'

SimpleCommand.run do

  global root: nil do
    @catalog = MusicBox::Catalog.new(root: @root)
  end

  command 'extract' do |args|
    MusicBox::Importer.new(catalog: @catalog).extract(args)
  end

  command 'export', dir: nil, threaded: true do |args|
    raise Error unless @dir
    @catalog.export(args, dir: @dir, threaded: @threaded)
  end

  command 'fix' do |args|
    @catalog.fix(args)
  end

  command 'import' do |args|
    MusicBox::Importer.new(catalog: @catalog).import(args)
  end

  command 'label' do |args|
    labeler = MusicBox::Labeler.new(catalog: @catalog)
    @catalog.prompt_releases(args).each { |r| labeler << r.to_label }
    labeler.make_labels('/tmp/labels.pdf', open: true)
  end

  command 'dir', open: false do |args|
    @catalog.dir(args, open: @open)
  end

  command 'orphaned' do
    @catalog.show_orphaned
  end

  command 'show', details: false do |args|
    @catalog.show(args, show_details: @details)
  end

  command 'csv' do |args|
    @catalog.make_csv(args)
  end

  command 'show-dups' do |args|
    @catalog.show_dups(args)
  end

  command 'make-artist-keys' do |args|
    @catalog.make_artist_keys(args)
  end

  command 'play', device: nil, log_level: nil do |args|
    player = MusicBox::Player.new(
      catalog: @catalog,
      audio_device: @device,
      mpv_log_level: @log_level)
    player.play
  end

  command 'select' do |args|
    @catalog.select(args)
  end

  command 'update' do |args|
    MusicBox::Discogs.new(catalog: @catalog).update
  end

  command 'update-info', yes: false do |args|
    @catalog.update_info(args, yes: @yes)
  end

end